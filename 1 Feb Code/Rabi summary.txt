def power_rabi(qubit, frame, duration, scale, shots=10000):
    
    p = Program(f'DECLARE ro BIT',
               'RESET',
               f'SET-SCALE {frame} {scale}', 
               f'PULSE {frame} flat(duration: {duration}e-9, iq: 1.0)',
               f'MEASURE {qubit} ro'
               ).wrap_in_numshots_loop(shots)
    
    return p
    
# runtime parameters
shots = 10000
qubit = 7
scale = .5

# get calibrations and frames
qc = get_qc('Aspen-11')
cals = qc.compiler.get_calibration_program()
rf_frames = list(filter(lambda f: f[0].name == "rf", cals.frames.items()))

# save qubit frame and frequency
(frame, frame_def) = rf_frames[qubit]
frequency = frame_def.initial_frequency

# initialize loop
times = np.linspace(4,100,25)
results = collections.defaultdict(list)

for duration in times:
    
    # compile program
    prog = power_rabi(qubit, frame, duration, scale, shots)
    exe = qc.compiler.native_quil_to_executable(prog)
    
    # run program
    result = qc.run(exe).readout_data.get('ro')
    
    # analysis
    probability = np.sum(result) / shots
    results['Probability'].append(probability)